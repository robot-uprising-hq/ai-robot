# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import RobotSystemCommunication_pb2 as proto_dot_RobotSystemCommunication__pb2


class RobotFrontendStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MakeAction = channel.unary_unary(
                '/robotsystemcommunication.RobotFrontend/MakeAction',
                request_serializer=proto_dot_RobotSystemCommunication__pb2.RobotActionRequest.SerializeToString,
                response_deserializer=proto_dot_RobotSystemCommunication__pb2.RobotActionResponse.FromString,
                )


class RobotFrontendServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MakeAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobotFrontendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MakeAction': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeAction,
                    request_deserializer=proto_dot_RobotSystemCommunication__pb2.RobotActionRequest.FromString,
                    response_serializer=proto_dot_RobotSystemCommunication__pb2.RobotActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'robotsystemcommunication.RobotFrontend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RobotFrontend(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MakeAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robotsystemcommunication.RobotFrontend/MakeAction',
            proto_dot_RobotSystemCommunication__pb2.RobotActionRequest.SerializeToString,
            proto_dot_RobotSystemCommunication__pb2.RobotActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BrainServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAction = channel.unary_unary(
                '/robotsystemcommunication.BrainServer/GetAction',
                request_serializer=proto_dot_RobotSystemCommunication__pb2.BrainActionRequest.SerializeToString,
                response_deserializer=proto_dot_RobotSystemCommunication__pb2.BrainActionResponse.FromString,
                )


class BrainServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrainServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAction,
                    request_deserializer=proto_dot_RobotSystemCommunication__pb2.BrainActionRequest.FromString,
                    response_serializer=proto_dot_RobotSystemCommunication__pb2.BrainActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'robotsystemcommunication.BrainServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BrainServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robotsystemcommunication.BrainServer/GetAction',
            proto_dot_RobotSystemCommunication__pb2.BrainActionRequest.SerializeToString,
            proto_dot_RobotSystemCommunication__pb2.BrainActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SimulationServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetScreenCapture = channel.unary_unary(
                '/robotsystemcommunication.SimulationServer/GetScreenCapture',
                request_serializer=proto_dot_RobotSystemCommunication__pb2.SimulationScreenCaptureRequest.SerializeToString,
                response_deserializer=proto_dot_RobotSystemCommunication__pb2.SimulationScreenCaptureResponse.FromString,
                )
        self.MakeAction = channel.unary_unary(
                '/robotsystemcommunication.SimulationServer/MakeAction',
                request_serializer=proto_dot_RobotSystemCommunication__pb2.SimulationActionRequest.SerializeToString,
                response_deserializer=proto_dot_RobotSystemCommunication__pb2.SimulationActionResponse.FromString,
                )


class SimulationServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetScreenCapture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimulationServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetScreenCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScreenCapture,
                    request_deserializer=proto_dot_RobotSystemCommunication__pb2.SimulationScreenCaptureRequest.FromString,
                    response_serializer=proto_dot_RobotSystemCommunication__pb2.SimulationScreenCaptureResponse.SerializeToString,
            ),
            'MakeAction': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeAction,
                    request_deserializer=proto_dot_RobotSystemCommunication__pb2.SimulationActionRequest.FromString,
                    response_serializer=proto_dot_RobotSystemCommunication__pb2.SimulationActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'robotsystemcommunication.SimulationServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimulationServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetScreenCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robotsystemcommunication.SimulationServer/GetScreenCapture',
            proto_dot_RobotSystemCommunication__pb2.SimulationScreenCaptureRequest.SerializeToString,
            proto_dot_RobotSystemCommunication__pb2.SimulationScreenCaptureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robotsystemcommunication.SimulationServer/MakeAction',
            proto_dot_RobotSystemCommunication__pb2.SimulationActionRequest.SerializeToString,
            proto_dot_RobotSystemCommunication__pb2.SimulationActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
